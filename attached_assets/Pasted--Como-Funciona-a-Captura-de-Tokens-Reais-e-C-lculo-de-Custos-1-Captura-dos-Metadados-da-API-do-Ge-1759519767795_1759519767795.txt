 Como Funciona a Captura de Tokens Reais e C√°lculo de Custos
1Ô∏è‚É£ Captura dos Metadados da API do Gemini
Quando o texto √© modificado pela IA (no text-modification-service.ts linha 656), o sistema captura os metadados reais da resposta do Gemini:

// Ap√≥s chamar a API do Gemini
const result = await this.model.generateContent(optimizedPrompt);
const response = result.response.text();
// üéØ Captura os metadados REAIS de uso de tokens
const usageMetadata = result.response.usageMetadata || {};
const rawPromptTokens = usageMetadata.promptTokenCount || 0;        // Tokens de entrada
const rawOutputTokens = usageMetadata.candidatesTokenCount || 0;     // Tokens de sa√≠da  
const rawTotalTokens = usageMetadata.totalTokenCount || 0;           // Total
2Ô∏è‚É£ Normaliza√ß√£o dos Valores
O sistema garante consist√™ncia matem√°tica nos valores (linhas 665-690):

// Garante que: promptTokens + outputTokens = totalTokens SEMPRE
if (rawTotalTokens > 0) {
  finalTotalTokens = rawTotalTokens;
  finalPromptTokens = rawPromptTokens;
  finalOutputTokens = finalTotalTokens - finalPromptTokens;
} else {
  // Fallback se metadados incompletos
  finalPromptTokens = rawPromptTokens || Math.floor(text.length / 4);
  finalOutputTokens = rawOutputTokens || Math.floor(text.length / 3);
  finalTotalTokens = finalPromptTokens + finalOutputTokens;
}
3Ô∏è‚É£ C√°lculo do Custo Real em BRL
O cost-tracking-service.ts calcula o custo baseado nos tokens reais capturados:

// Pre√ßos do Gemini 2.5 Flash-Lite (por milh√£o de tokens)
GEMINI_PRICING_USD = {
  input: 0.10,   // $0.10 por milh√£o de tokens de entrada
  output: 0.40,  // $0.40 por milh√£o de tokens de sa√≠da
}
// üí∞ C√°lculo do custo em USD
const inputCostUSD = (inputTokens / 1_000_000) * 0.10;
const outputCostUSD = (outputTokens / 1_000_000) * 0.40;
const totalCostUSD = inputCostUSD + outputCostUSD;
// üí± Convers√£o para BRL (taxa de c√¢mbio din√¢mica)
const totalCostBRL = await currencyService.convertUSDtoBRL(totalCostUSD);
// ü™ô Convers√£o para centavos (R$ 0,01 = 1 centavo)
const centavos = Math.ceil(totalCostBRL * 100);
Exemplo real:

1.000 tokens entrada + 500 tokens sa√≠da
Custo USD: (1000/1M √ó $0.10) + (500/1M √ó $0.40) = $0.0001 + $0.0002 = $0.0003
Taxa c√¢mbio: ~R$ 6,00
Custo BRL: $0.0003 √ó 6 = R$ 0,0018
Custo final: 1 centavo (arredondado para cima)
4Ô∏è‚É£ Registro no Banco de Dados
O sistema registra o uso real no per√≠odo do usu√°rio (weekly-cost-limiting.ts):

await weeklyCostLimitingService.recordUsage(
  userId,
  operation: 'text_modification',
  costCentavos: centavos,  // Custo calculado com tokens REAIS
  inputTokens: finalPromptTokens,
  outputTokens: finalOutputTokens
);
5Ô∏è‚É£ Atualiza√ß√£o da Barra de Progresso
O componente AIUsageProgress (linha 675 do controlador) busca os dados atualizados:

// Busca estat√≠sticas reais do banco de dados
const response = await fetch("/api/weekly-usage/stats");
const data = await response.json();
// Dados retornados:
{
  currentUsageCentavos: 45,      // Custo acumulado REAL
  limitCentavos: 875,            // Limite do plano (R$ 8,75)
  usagePercentage: 5.14,         // 45/875 = 5.14%
  operationCount: 12,            // Total de opera√ß√µes
  costBreakdown: {               // Detalhamento por tipo
    "text_modification": 25,
    "essay_correction": 20
  }
}
A barra √© atualizada automaticamente:

‚úÖ A cada 30 segundos
‚úÖ Ap√≥s cada opera√ß√£o de IA (via refreshAIUsageStats())
‚úÖ Reflete o uso REAL dos tokens capturados da API
üìà Diferen√ßa entre Valor Pr√©-definido vs Real
Antes (estimativa):

Sistema estimava: ~1.500 tokens ‚Üí ~3 centavos
Agora (real):

API retorna: 1.234 tokens (entrada) + 456 tokens (sa√≠da)
C√°lculo real: (1234/1M √ó $0.10) + (456/1M √ó $0.40) = 2 centavos ‚úÖ
Isso garante que voc√™ paga apenas pelo que realmente usou, com precis√£o total baseada nos metadados da API do Gemini!